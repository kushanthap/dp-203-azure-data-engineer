{
	"name": "08 Delta Lake with spark",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark9nlosdj",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "22e4b4e7-5e32-43ed-947c-67f33b21f4a7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/3ab7621d-8ee4-445a-8dd2-8b1f6718c4dc/resourceGroups/dp203-9nlosdj/providers/Microsoft.Synapse/workspaces/synapse9nlosdj/bigDataPools/spark9nlosdj",
				"name": "spark9nlosdj",
				"type": "Spark",
				"endpoint": "https://synapse9nlosdj.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark9nlosdj",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"root_folder = 'abfss://files@datalake9nlosdj.dfs.core.windows.net'"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read.load(root_folder+'/dp-203/Allfiles/labs/07/data//products.csv', format='csv'\r\n",
					", header=True\r\n",
					")\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.printSchema()"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delta_table_path = root_folder+'/delta_lake/products'"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Writing as Delta format"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# writing df as delta file\r\n",
					"df.write.format(\"delta\").mode('overwrite').save(delta_table_path)"
				],
				"execution_count": 35
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Loading as Spark DF"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"spark_delta_df = spark.read.load(path=delta_table_path, format=\"delta\")\r\n",
					"display(spark_delta_df.limit(10))"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# adding new rows -----------\r\n",
					"# reading new rows\r\n",
					"df_new = spark.read.load(root_folder+'/dp-203/Allfiles/labs/07/data2//new_product.txt', format='csv'\r\n",
					", header=True\r\n",
					")\r\n",
					"# display(df.limit(10))\r\n",
					"df_new.write.format('delta').mode('append').save(delta_table_path)\r\n",
					"\r\n",
					"spark_delta_df = spark.read.load(path=delta_table_path, format=\"delta\")\r\n",
					"display(spark_delta_df.orderBy('productID').limit(10))\r\n",
					""
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Loading data as Delta table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# loading data as Delta Table\r\n",
					"from delta.tables import DeltaTable\r\n",
					"# from pyspark.sql.functions import *\r\n",
					"\r\n",
					"# Create a deltaTable object\r\n",
					"deltaTable = DeltaTable.forPath(spark, delta_table_path)"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# View the updated data as a dataframe\r\n",
					"display(deltaTable.toDF().limit(10))\r\n",
					"\r\n",
					"# View the updated data as a dataframe - alternative way\r\n",
					"deltaTable.toDF().orderBy('productID').show(10)"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Update the table (reduce price of product 771 by 10%)\r\n",
					"deltaTable.update(\r\n",
					"    condition = \"ProductID == 771\",\r\n",
					"    set = { \"ListPrice\": \"ListPrice * 0.9\" }\r\n",
					")"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Update the table - to one of the later appended rows \r\n",
					"deltaTable.update(\r\n",
					"    condition = \"ProductID == 600\",\r\n",
					"    set = { \"ListPrice\": \"ListPrice * 0.9\" }\r\n",
					")"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# delete record\r\n",
					"deltaTable.delete(\r\n",
					"    condition=\"ProductID == 773\"\r\n",
					")"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# delete record - one of the later appended rows \r\n",
					"deltaTable.delete(\r\n",
					"    condition=\"ProductID == 600\"\r\n",
					")"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# history of changes\r\n",
					"deltaTable.history(10).show(20, False, True)"
				],
				"execution_count": 64
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Querying versions"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read.format(\"delta\").option(\"versionAsOf\", 3).load(delta_table_path)\r\n",
					"display(df.orderBy('ProductID').limit(10))"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.read.format(\"delta\").option(\"timestampAsOf\", '2024-12-28 09:20:35').load(delta_table_path)\r\n",
					"display(df.orderBy('ProductID').limit(10))"
				],
				"execution_count": 60
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Creating catelog tables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"DeltaTable.create(spark) \\\r\n",
					"  .tableName(\"default.ManagedProducts\") \\\r\n",
					"  .addColumn(\"Productid\", \"INT\") \\\r\n",
					"  .addColumn(\"ProductName\", \"STRING\") \\\r\n",
					"  .addColumn(\"Category\", \"STRING\") \\\r\n",
					"  .addColumn(\"Price\", \"FLOAT\") \\\r\n",
					"  .execute()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Streaming dataset"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### As source"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delta_table_path_stream_source = root_folder+'/delta_lake/products_stream_source'\r\n",
					"delta_table_path_stream_sink = root_folder+'/delta_lake/products_stream_sink'\r\n",
					"delta_table_path_stream_sink_cp = root_folder+'/delta_lake/products_stream_sink_checkpoint'\r\n",
					"\r\n",
					""
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# --------- preapring delta folder with empty folder\r\n",
					"# Define the schema \r\n",
					"from pyspark.sql.types import *\r\n",
					"schema = StructType([ \r\n",
					"    StructField(\"ProductID\", StringType(), True), \r\n",
					"    StructField(\"ProductName\", StringType(), True), \r\n",
					"    StructField(\"Category\", StringType(), True), \r\n",
					"    StructField(\"ListPrice\", StringType(), True)\r\n",
					"])\r\n",
					"# Create an empty DataFrame with the schema \r\n",
					"empty_df = spark.createDataFrame([], schema) \r\n",
					"# Write the empty DataFrame to the Delta table location \r\n",
					"empty_df.write.format(\"delta\").save(delta_table_path_stream_source)"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load a streaming dataframe from the Delta Table\r\n",
					"stream_df = spark.readStream.format(\"delta\") \\\r\n",
					"    .option(\"ignoreChanges\", \"true\") \\\r\n",
					"    .load(delta_table_path_stream_source)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Now you can process the streaming data in the dataframe\r\n",
					"# for example, write to data lake\r\n",
					"q = stream_df.writeStream \\\r\n",
					"    .outputMode(\"append\") \\\r\n",
					"    .format(\"delta\").option(\"checkpointLocation\", delta_table_path_stream_sink_cp) \\\r\n",
					"    .start(delta_table_path_stream_sink)"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# updating source to trigger sinking\r\n",
					"# read new data with the schema \r\n",
					"prod_id = 503\r\n",
					"df_new = spark.read.load(path=root_folder+'/dp-203/Allfiles/labs/07/data_append/new_product_{}.csv'.format(prod_id), format='csv', schema=schema)\r\n",
					"# Write the new DataFrame to the Delta table location \r\n",
					"df_new.write.format(\"delta\").save(delta_table_path_stream_source, mode='append')"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# for monitor\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"deltaTable_source = DeltaTable.forPath(spark, delta_table_path_stream_source)\r\n",
					"deltaTable_sink = DeltaTable.forPath(spark, delta_table_path_stream_sink)"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# monitor here\r\n",
					"display(deltaTable_source.toDF().limit(10))\r\n",
					"display(deltaTable_sink.toDF().limit(10))"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stop\r\n",
					"q.stop()"
				],
				"execution_count": 38
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### As sink"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"source_files_path = root_folder+'/dp-203/Allfiles/labs/07/json_file_drop'\r\n",
					"delta_table_path_stream_sink = root_folder+'/delta_lake/sink_demo_sink'\r\n",
					"delta_table_path_stream_sink_cp = root_folder+'/delta_lake/sink_demo_checkpoint'"
				],
				"execution_count": 75
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"# Create a stream that reads JSON data from a folder\r\n",
					"jsonSchema = StructType([\r\n",
					"    StructField(\"device\", StringType(), False),\r\n",
					"    StructField(\"status\", StringType(), False)\r\n",
					"])\r\n",
					"stream_df = spark.readStream.schema(jsonSchema).option(\"maxFilesPerTrigger\", 1).json(source_files_path)"
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Write the stream to a delta table\r\n",
					"delta_stream = stream_df.writeStream.format(\"delta\").option(\"checkpointLocation\", delta_table_path_stream_sink_cp).start(delta_table_path_stream_sink)"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"CREATE TABLE sink_demo\r\n",
					"USING DELTA \r\n",
					"LOCATION 'abfss://files@datalake9nlosdj.dfs.core.windows.net/delta_lake/sink_demo_sink'"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql \r\n",
					"SELECT device, status\r\n",
					"FROM sink_demo;"
				],
				"execution_count": 89
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# source files\r\n",
					"df_json = spark.read.json(source_files_path, schema=jsonSchema)\r\n",
					"display(df_json)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delta_stream.stop()"
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"DROP TABLE sink_demo"
				],
				"execution_count": 92
			}
		]
	}
}